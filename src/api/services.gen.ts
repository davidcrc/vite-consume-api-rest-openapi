// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { AppControllerGetHelloError, AppControllerGetHelloResponse, TasksControllerGetTasksError, TasksControllerGetTasksResponse, TasksControllerCreateTaskData, TasksControllerCreateTaskError, TasksControllerCreateTaskResponse, TasksControllerGetTaskData, TasksControllerGetTaskError, TasksControllerGetTaskResponse, TasksControllerUpdateTaskData, TasksControllerUpdateTaskError, TasksControllerUpdateTaskResponse, TasksControllerDeleteTaskData, TasksControllerDeleteTaskError, TasksControllerDeleteTaskResponse } from './types.gen';

export const client = createClient(createConfig());

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<AppControllerGetHelloResponse, AppControllerGetHelloError, ThrowOnError>({
    ...options,
    url: '/'
}); };

/**
 * Obtiene todas las tareas
 */
export const tasksControllerGetTasks = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<TasksControllerGetTasksResponse, TasksControllerGetTasksError, ThrowOnError>({
    ...options,
    url: '/tasks'
}); };

/**
 * Crea una nueva tarea
 */
export const tasksControllerCreateTask = <ThrowOnError extends boolean = false>(options: Options<TasksControllerCreateTaskData, ThrowOnError>) => { return (options?.client ?? client).post<TasksControllerCreateTaskResponse, TasksControllerCreateTaskError, ThrowOnError>({
    ...options,
    url: '/tasks'
}); };

/**
 * Obtiene una tarea por su ID
 */
export const tasksControllerGetTask = <ThrowOnError extends boolean = false>(options: Options<TasksControllerGetTaskData, ThrowOnError>) => { return (options?.client ?? client).get<TasksControllerGetTaskResponse, TasksControllerGetTaskError, ThrowOnError>({
    ...options,
    url: '/tasks/{id}'
}); };

/**
 * Actualiza una tarea por su ID
 */
export const tasksControllerUpdateTask = <ThrowOnError extends boolean = false>(options: Options<TasksControllerUpdateTaskData, ThrowOnError>) => { return (options?.client ?? client).patch<TasksControllerUpdateTaskResponse, TasksControllerUpdateTaskError, ThrowOnError>({
    ...options,
    url: '/tasks/{id}'
}); };

/**
 * Elimina una tarea por su ID
 */
export const tasksControllerDeleteTask = <ThrowOnError extends boolean = false>(options: Options<TasksControllerDeleteTaskData, ThrowOnError>) => { return (options?.client ?? client).delete<TasksControllerDeleteTaskResponse, TasksControllerDeleteTaskError, ThrowOnError>({
    ...options,
    url: '/tasks/{id}'
}); };