/**
 * Generated by @openapi-codegen
 *
 * @version 1.1
 */
import * as reactQuery from "@tanstack/react-query";
import { useMyApiContext, MyApiContext } from "./myApiContext";
import type * as Fetcher from "./myApiFetcher";
import { myApiFetch } from "./myApiFetcher";
import type * as Schemas from "./myApiSchemas";

export type AppControllerGetHelloError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerGetHelloVariables = MyApiContext["fetcherOptions"];

export const fetchAppControllerGetHello = (
  variables: AppControllerGetHelloVariables,
  signal?: AbortSignal,
) =>
  myApiFetch<undefined, AppControllerGetHelloError, undefined, {}, {}, {}>({
    url: "/",
    method: "get",
    ...variables,
    signal,
  });

export const useAppControllerGetHello = <TData = undefined,>(
  variables: AppControllerGetHelloVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, AppControllerGetHelloError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useMyApiContext(options);
  return reactQuery.useQuery<undefined, AppControllerGetHelloError, TData>({
    queryKey: queryKeyFn({
      path: "/",
      operationId: "appControllerGetHello",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAppControllerGetHello({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type TasksControllerGetTasksError = Fetcher.ErrorWrapper<undefined>;

export type TasksControllerGetTasksVariables = MyApiContext["fetcherOptions"];

export const fetchTasksControllerGetTasks = (
  variables: TasksControllerGetTasksVariables,
  signal?: AbortSignal,
) =>
  myApiFetch<undefined, TasksControllerGetTasksError, undefined, {}, {}, {}>({
    url: "/tasks",
    method: "get",
    ...variables,
    signal,
  });

export const useTasksControllerGetTasks = <TData = undefined,>(
  variables: TasksControllerGetTasksVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, TasksControllerGetTasksError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useMyApiContext(options);
  return reactQuery.useQuery<undefined, TasksControllerGetTasksError, TData>({
    queryKey: queryKeyFn({
      path: "/tasks",
      operationId: "tasksControllerGetTasks",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTasksControllerGetTasks({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type TasksControllerCreateTaskError = Fetcher.ErrorWrapper<undefined>;

export type TasksControllerCreateTaskVariables = {
  body: Schemas.CreateTaskDto;
} & MyApiContext["fetcherOptions"];

export const fetchTasksControllerCreateTask = (
  variables: TasksControllerCreateTaskVariables,
  signal?: AbortSignal,
) =>
  myApiFetch<
    undefined,
    TasksControllerCreateTaskError,
    Schemas.CreateTaskDto,
    {},
    {},
    {}
  >({ url: "/tasks", method: "post", ...variables, signal });

export const useTasksControllerCreateTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TasksControllerCreateTaskError,
      TasksControllerCreateTaskVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useMyApiContext();
  return reactQuery.useMutation<
    undefined,
    TasksControllerCreateTaskError,
    TasksControllerCreateTaskVariables
  >({
    mutationFn: (variables: TasksControllerCreateTaskVariables) =>
      fetchTasksControllerCreateTask({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TasksControllerGetTaskPathParams = {
  id: number;
};

export type TasksControllerGetTaskError = Fetcher.ErrorWrapper<undefined>;

export type TasksControllerGetTaskVariables = {
  pathParams: TasksControllerGetTaskPathParams;
} & MyApiContext["fetcherOptions"];

export const fetchTasksControllerGetTask = (
  variables: TasksControllerGetTaskVariables,
  signal?: AbortSignal,
) =>
  myApiFetch<
    undefined,
    TasksControllerGetTaskError,
    undefined,
    {},
    {},
    TasksControllerGetTaskPathParams
  >({ url: "/tasks/{id}", method: "get", ...variables, signal });

export const useTasksControllerGetTask = <TData = undefined,>(
  variables: TasksControllerGetTaskVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, TasksControllerGetTaskError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useMyApiContext(options);
  return reactQuery.useQuery<undefined, TasksControllerGetTaskError, TData>({
    queryKey: queryKeyFn({
      path: "/tasks/{id}",
      operationId: "tasksControllerGetTask",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchTasksControllerGetTask({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type TasksControllerUpdateTaskPathParams = {
  id: number;
};

export type TasksControllerUpdateTaskError = Fetcher.ErrorWrapper<undefined>;

export type TasksControllerUpdateTaskVariables = {
  body: Schemas.UpdateTaskDto;
  pathParams: TasksControllerUpdateTaskPathParams;
} & MyApiContext["fetcherOptions"];

export const fetchTasksControllerUpdateTask = (
  variables: TasksControllerUpdateTaskVariables,
  signal?: AbortSignal,
) =>
  myApiFetch<
    undefined,
    TasksControllerUpdateTaskError,
    Schemas.UpdateTaskDto,
    {},
    {},
    TasksControllerUpdateTaskPathParams
  >({ url: "/tasks/{id}", method: "patch", ...variables, signal });

export const useTasksControllerUpdateTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TasksControllerUpdateTaskError,
      TasksControllerUpdateTaskVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useMyApiContext();
  return reactQuery.useMutation<
    undefined,
    TasksControllerUpdateTaskError,
    TasksControllerUpdateTaskVariables
  >({
    mutationFn: (variables: TasksControllerUpdateTaskVariables) =>
      fetchTasksControllerUpdateTask({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type TasksControllerDeleteTaskPathParams = {
  id: number;
};

export type TasksControllerDeleteTaskError = Fetcher.ErrorWrapper<undefined>;

export type TasksControllerDeleteTaskVariables = {
  pathParams: TasksControllerDeleteTaskPathParams;
} & MyApiContext["fetcherOptions"];

export const fetchTasksControllerDeleteTask = (
  variables: TasksControllerDeleteTaskVariables,
  signal?: AbortSignal,
) =>
  myApiFetch<
    undefined,
    TasksControllerDeleteTaskError,
    undefined,
    {},
    {},
    TasksControllerDeleteTaskPathParams
  >({ url: "/tasks/{id}", method: "delete", ...variables, signal });

export const useTasksControllerDeleteTask = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      TasksControllerDeleteTaskError,
      TasksControllerDeleteTaskVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useMyApiContext();
  return reactQuery.useMutation<
    undefined,
    TasksControllerDeleteTaskError,
    TasksControllerDeleteTaskVariables
  >({
    mutationFn: (variables: TasksControllerDeleteTaskVariables) =>
      fetchTasksControllerDeleteTask({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/";
      operationId: "appControllerGetHello";
      variables: AppControllerGetHelloVariables;
    }
  | {
      path: "/tasks";
      operationId: "tasksControllerGetTasks";
      variables: TasksControllerGetTasksVariables;
    }
  | {
      path: "/tasks/{id}";
      operationId: "tasksControllerGetTask";
      variables: TasksControllerGetTaskVariables;
    };
